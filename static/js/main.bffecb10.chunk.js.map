{"version":3,"sources":["MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","url","this","props","movie","id","window","location","href","react_default","a","createElement","key","alt","width","src","poster_src","title","overview","type","onClick","viewMovie","bind","value","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","performSearch","searchTerm","_this2","console","log","urlString","$","ajax","success","searchResults","results","movieRows","forEach","poster_path","movieRow","src_MovieRow","push","setState","rows","error","xhr","status","err","event","target","className","style","fontSize","display","paddingTop","paddingBottom","paddingLeft","onChange","searchChangeHandler","placeholder","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAgDeA,6LAlCX,IAAMC,EAAM,oCAAsCC,KAAKC,MAAMC,MAAMC,GAEnEC,OAAOC,SAASC,KAAOP,mCAIvB,OACEQ,EAAAC,EAAAC,cAAA,SAAOC,IAAKV,KAAKC,MAAMC,MAAMC,IAC3BI,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,MAAM,MAAMC,IAAKb,KAAKC,MAAMC,MAAMY,cAGtDP,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKT,KAAKC,MAAMC,MAAMa,OAEtBR,EAAAC,EAAAC,cAAA,SAAIT,KAAKC,MAAMC,MAAMc,UAIrBT,EAAAC,EAAAC,cAAA,SACEQ,KAAK,SACLC,QAASlB,KAAKmB,UAAUC,KAAKpB,MAC7BqB,MAAM,wCApCCC,IAAMC,4BCuHdC,cAhHb,SAAAA,EAAYvB,GAAO,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA1B,KAAAwB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA1B,KAAA0B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA9B,KAAMC,KAED8B,MAAQ,GAIbN,EAAKO,cAAc,UAPFP,6EAYLQ,GAAY,IAAAC,EAAAlC,KACxBmC,QAAQC,IAAI,qHAEZ,IAAMC,EACJ,6FACAJ,EAEFK,IAAEC,KAAK,CACLxC,IAAKsC,EAELG,QAAS,SAAAC,GACPN,QAAQC,IAAI,iFAEZ,IAAMM,EAAUD,EAAcC,QAExBC,EAAY,GAElBD,EAAQE,QAAQ,SAAA1C,GACdA,EAAMY,WACJ,kCAAoCZ,EAAM2C,YAE5CV,QAAQC,IAAIlC,EAAM2C,aAElBV,QAAQC,IAAIlC,EAAMa,OAIlB,IAAM+B,EAAWvC,EAAAC,EAAAC,cAACsC,EAAD,CAAUrC,IAAKR,EAAMC,GAAID,MAAOA,IAEjDyC,EAAUK,KAAKF,KAGjBZ,EAAKe,SAAS,CAAEC,KAAMP,KAGxBQ,MAAO,SAACC,EAAKC,EAAQC,GACnBnB,QAAQC,IAAI,gIAOEmB,GAClBpB,QAAQC,IAAImB,EAAMC,OAAOnC,OAIzB,IAEMY,EAAasB,EAAMC,OAAOnC,MAFfrB,KAIRgC,cAAcC,oCAIvB,OACE1B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOgD,UAAU,YACflD,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKE,IAAI,WAAWC,MAAM,KAAKC,IAAI,cAGrCN,EAAAC,EAAAC,cAAA,MAAIG,MAAM,MAEVL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,iEAMRF,EAAAC,EAAAC,cAAA,SACEiD,MAAO,CACLC,SAAU,GAEVC,QAAS,QAEThD,MAAO,MAEPiD,WAAY,EAEZC,cAAe,EAEfC,YAAa,IAIfC,SAAUhE,KAAKiE,oBAAoB7C,KAAKpB,MACxCkE,YAAY,2GAGblE,KAAK+B,MAAMmB,aA3GF3B,aCIE4C,QACW,cAA7B/D,OAAOC,SAAS+D,UAEe,UAA7BhE,OAAOC,SAAS+D,UAEhBhE,OAAOC,SAAS+D,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bffecb10.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass MovieRow extends React.Component {\r\n  //\r\n\r\n  viewMovie() {\r\n    //[실습 21-2]\r\n\r\n    //console.log(\"영화 상세보기를 합니다...\");\r\n\r\n    //console.log(this.props.movie.title);\r\n\r\n    //[실습 21-4]\r\n\r\n    const url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id;\r\n\r\n    window.location.href = url;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <table key={this.props.movie.id}>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              <img alt=\"poster\" width=\"120\" src={this.props.movie.poster_src} />\r\n            </td>\r\n\r\n            <td>\r\n              <h3>{this.props.movie.title}</h3>\r\n\r\n              <p>{this.props.movie.overview}</p>\r\n\r\n              {/* [실습21-1] */}\r\n\r\n              <input\r\n                type=\"button\"\r\n                onClick={this.viewMovie.bind(this)}\r\n                value=\"상세보기\"\r\n              />\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieRow;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport MovieRow from \"./MovieRow.js\";\r\n\r\nimport $ from \"jquery\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n\r\n    //[실습 19-1]\r\n\r\n    this.performSearch(\"marvel\");\r\n  }\r\n\r\n  //[실습 19-2][실습 19-3]\r\n\r\n  performSearch(searchTerm) {\r\n    console.log(\"tmdb Web Open API를 사용하여 검색 기능을 수행합니다..\");\r\n\r\n    const urlString =\r\n      \"https://api.themoviedb.org/3/search/movie?&api_key=4585341f278f0b2c7f7f22040ee7b13d&query=\" +\r\n      searchTerm;\r\n\r\n    $.ajax({\r\n      url: urlString,\r\n\r\n      success: searchResults => {\r\n        console.log(\"데이터를 가져오는데 성공함...\");\r\n\r\n        const results = searchResults.results;\r\n\r\n        const movieRows = [];\r\n\r\n        results.forEach(movie => {\r\n          movie.poster_src =\r\n            \"https://image.tmdb.org/t/p/w185\" + movie.poster_path;\r\n\r\n          console.log(movie.poster_path);\r\n\r\n          console.log(movie.title);\r\n\r\n          //\r\n\r\n          const movieRow = <MovieRow key={movie.id} movie={movie} />;\r\n\r\n          movieRows.push(movieRow);\r\n        });\r\n\r\n        this.setState({ rows: movieRows });\r\n      },\r\n\r\n      error: (xhr, status, err) => {\r\n        console.log(\"데이터를 가져오는데 실패함...\");\r\n      }\r\n    });\r\n  }\r\n\r\n  //[실습19-5]\r\n\r\n  searchChangeHandler(event) {\r\n    console.log(event.target.value);\r\n\r\n    //[실습 20-2]\r\n\r\n    const boundObj = this;\r\n\r\n    const searchTerm = event.target.value;\r\n\r\n    boundObj.performSearch(searchTerm);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <table className=\"titleBar\">\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                <img alt=\"app icon\" width=\"60\" src=\"logo.svg\" />\r\n              </td>\r\n\r\n              <td width=\"8\" />\r\n\r\n              <td>\r\n                <h2>eCom04 영화 DB 프로젝트</h2>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <input\r\n          style={{\r\n            fontSize: 15,\r\n\r\n            display: \"block\",\r\n\r\n            width: \"99%\",\r\n\r\n            paddingTop: 8,\r\n\r\n            paddingBottom: 8,\r\n\r\n            paddingLeft: 16\r\n          }}\r\n          // [실습 20-1]\r\n\r\n          onChange={this.searchChangeHandler.bind(this)}\r\n          placeholder=\"여기에 영화 검색 키워드를 입력하세요..\"\r\n        />\r\n\r\n        {this.state.rows}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}